// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: v-if > basic v-if 1`] = `
"import { child as _child, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div> </div>", true)

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    const x2 = _child(n2)
    _renderEffect(() => _setText(x2, _toDisplayString(_ctx.msg)))
    return n2
  })
  return n0
}"
`;

exports[`compiler: v-if > comment between branches 1`] = `
"import { createIf as _createIf, child as _child, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("<!--foo-->")
const t2 = _template("<p></p>")
const t3 = _template("<!--bar-->")
const t4 = _template("fine")
const t5 = _template("<div> </div>")

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    return n2
  }, () => _createIf(() => (_ctx.orNot), () => {
    const n5 = t1()
    const n6 = t2()
    return [n5, n6]
  }, () => {
    const n10 = t3()
    const n11 = t4()
    return [n10, n11]
  }))
  const n13 = t5()
  const x13 = _child(n13)
  _renderEffect(() => _setText(x13, _toDisplayString(_ctx.text)))
  return [n0, n13]
}"
`;

exports[`compiler: v-if > dedupe same template 1`] = `
"import { createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div>hello</div>")

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    return n2
  })
  const n3 = _createIf(() => (_ctx.ok), () => {
    const n5 = t0()
    return n5
  })
  return [n0, n3]
}"
`;

exports[`compiler: v-if > template v-if 1`] = `
"import { child as _child, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("hello")
const t2 = _template("<p> </p>", true)

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    const n3 = t1()
    const n4 = t2()
    const x4 = _child(n4)
    _renderEffect(() => _setText(x4, _toDisplayString(_ctx.msg)))
    return [n2, n3, n4]
  })
  return n0
}"
`;

exports[`compiler: v-if > v-if + v-else 1`] = `
"import { createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("<p></p>")

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    return n2
  }, () => {
    const n4 = t1()
    return n4
  })
  return n0
}"
`;

exports[`compiler: v-if > v-if + v-else-if + v-else 1`] = `
"import { createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("<p></p>")
const t2 = _template("fine")

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    return n2
  }, () => _createIf(() => (_ctx.orNot), () => {
    const n4 = t1()
    return n4
  }, () => {
    const n7 = t2()
    return n7
  }))
  return n0
}"
`;

exports[`compiler: v-if > v-if + v-else-if 1`] = `
"import { createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("<p></p>")

export function render(_ctx) {
  const n0 = _createIf(() => (_ctx.ok), () => {
    const n2 = t0()
    return n2
  }, () => _createIf(() => (_ctx.orNot), () => {
    const n4 = t1()
    return n4
  }))
  return n0
}"
`;

exports[`compiler: v-if > v-if + v-if / v-else[-if] 1`] = `
"import { setInsertionState as _setInsertionState, createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<span>foo</span>")
const t1 = _template("<span>bar</span>")
const t2 = _template("<span>baz</span>")
const t3 = _template("<div></div>", true)

export function render(_ctx) {
  const n8 = t3()
  _setInsertionState(n8)
  const n0 = _createIf(() => (_ctx.foo), () => {
    const n2 = t0()
    return n2
  })
  _setInsertionState(n8)
  const n3 = _createIf(() => (_ctx.bar), () => {
    const n5 = t1()
    return n5
  }, () => {
    const n7 = t2()
    return n7
  })
  return n8
}"
`;
