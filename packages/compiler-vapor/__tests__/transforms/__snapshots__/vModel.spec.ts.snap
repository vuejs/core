// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: vModel transform > component > v-model for component should generate modelModifiers 1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, { modelValue: () => (_ctx.foo),
  "onUpdate:modelValue": () => _value => (_ctx.foo = _value),
  modelModifiers: () => ({ trim: true, "bar-baz": true }) }, null, true)
  return n0
}"
`;

exports[`compiler: vModel transform > component > v-model for component should work 1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, { modelValue: () => (_ctx.foo),
  "onUpdate:modelValue": () => _value => (_ctx.foo = _value) }, null, true)
  return n0
}"
`;

exports[`compiler: vModel transform > component > v-model with arguments for component should generate modelModifiers 1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, {
    foo: () => (_ctx.foo),
    "onUpdate:foo": () => _value => (_ctx.foo = _value),
    fooModifiers: () => ({ trim: true }), 
    bar: () => (_ctx.bar),
    "onUpdate:bar": () => _value => (_ctx.bar = _value),
    barModifiers: () => ({ number: true })
  }, null, true)
  return n0
}"
`;

exports[`compiler: vModel transform > component > v-model with arguments for component should work 1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, { bar: () => (_ctx.foo),
  "onUpdate:bar": () => _value => (_ctx.foo = _value) }, null, true)
  return n0
}"
`;

exports[`compiler: vModel transform > component > v-model with dynamic arguments for component should generate modelModifiers  1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, { $: [
    () => ({ [_ctx.foo]: _ctx.foo,
    ["onUpdate:" + _ctx.foo]: () => _value => (_ctx.foo = _value),
    [_ctx.foo + "Modifiers"]: () => ({ trim: true }) }), 
    () => ({ [_ctx.bar]: _ctx.bar,
    ["onUpdate:" + _ctx.bar]: () => _value => (_ctx.bar = _value),
    [_ctx.bar + "Modifiers"]: () => ({ number: true }) })
  ] }, null, true)
  return n0
}"
`;

exports[`compiler: vModel transform > component > v-model with dynamic arguments for component should work 1`] = `
"import { resolveComponent as _resolveComponent, createComponentWithFallback as _createComponentWithFallback } from 'vue';

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = _createComponentWithFallback(_component_Comp, { $: [
    () => ({ [_ctx.arg]: _ctx.foo,
    ["onUpdate:" + _ctx.arg]: () => _value => (_ctx.foo = _value) })
  ] }, null, true)
  return n0
}"
`;

exports[`compiler: vModel transform > modifiers > .lazy 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyTextModel(n0, () => (_ctx.model), _value => (_ctx.model = _value), { lazy: true })
  return n0
}"
`;

exports[`compiler: vModel transform > modifiers > .number 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyTextModel(n0, () => (_ctx.model), _value => (_ctx.model = _value), { number: true })
  return n0
}"
`;

exports[`compiler: vModel transform > modifiers > .trim 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyTextModel(n0, () => (_ctx.model), _value => (_ctx.model = _value), { trim: true })
  return n0
}"
`;

exports[`compiler: vModel transform > should support input (checkbox) 1`] = `
"import { applyCheckboxModel as _applyCheckboxModel, template as _template } from 'vue';
const t0 = _template("<input type=\\"checkbox\\">", true)

export function render(_ctx) {
  const n0 = t0()
  _applyCheckboxModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support input (dynamic type) 1`] = `
"import { applyDynamicModel as _applyDynamicModel, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyDynamicModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support input (radio) 1`] = `
"import { applyRadioModel as _applyRadioModel, template as _template } from 'vue';
const t0 = _template("<input type=\\"radio\\">", true)

export function render(_ctx) {
  const n0 = t0()
  _applyRadioModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support input (text) 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<input type=\\"text\\">", true)

export function render(_ctx) {
  const n0 = t0()
  _applyTextModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support member expression 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<input>")

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  const n1 = t0()
  const n2 = t0()
  _applyTextModel(n0, () => (_ctx.setupRef.child), _value => (_ctx.setupRef.child = _value))
  _applyTextModel(n1, () => (_ctx.setupLet.child), _value => (_ctx.setupLet.child = _value))
  _applyTextModel(n2, () => (_ctx.setupMaybeRef.child), _value => (_ctx.setupMaybeRef.child = _value))
  return [n0, n1, n2]
}"
`;

exports[`compiler: vModel transform > should support member expression w/ inline 1`] = `
"
  const n0 = t0()
  const n1 = t0()
  const n2 = t0()
  _applyTextModel(n0, () => (setupRef.value.child), _value => (setupRef.value.child = _value))
  _applyTextModel(n1, () => (_unref(setupLet).child), _value => (_unref(setupLet).child = _value))
  _applyTextModel(n2, () => (_unref(setupMaybeRef).child), _value => (_unref(setupMaybeRef).child = _value))
  return [n0, n1, n2]
"
`;

exports[`compiler: vModel transform > should support select 1`] = `
"import { applySelectModel as _applySelectModel, template as _template } from 'vue';
const t0 = _template("<select></select>", true)

export function render(_ctx) {
  const n0 = t0()
  _applySelectModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support simple expression 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyTextModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support textarea 1`] = `
"import { applyTextModel as _applyTextModel, template as _template } from 'vue';
const t0 = _template("<textarea></textarea>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyTextModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;

exports[`compiler: vModel transform > should support w/ dynamic v-bind 1`] = `
"import { applyDynamicModel as _applyDynamicModel, setDynamicProps as _setDynamicProps, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyDynamicModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  _renderEffect(() => _setDynamicProps(n0, [_ctx.obj], true))
  return n0
}"
`;

exports[`compiler: vModel transform > should support w/ dynamic v-bind 2`] = `
"import { applyDynamicModel as _applyDynamicModel, template as _template } from 'vue';
const t0 = _template("<input>", true)

export function render(_ctx) {
  const n0 = t0()
  _applyDynamicModel(n0, () => (_ctx.model), _value => (_ctx.model = _value))
  return n0
}"
`;
