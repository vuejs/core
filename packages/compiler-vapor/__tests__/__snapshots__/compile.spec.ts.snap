// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compile > bindings 1`] = `
"import { child as _child, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div> </div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  const x0 = _child(n0)
  _renderEffect(() => _setText(x0, "count is " + _toDisplayString(_ctx.count) + "."))
  return n0
}"
`;

exports[`compile > custom directive > basic 1`] = `
"import { resolveDirective as _resolveDirective, withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx) {
  const _directive_test = _resolveDirective("test")
  const _directive_hello = _resolveDirective("hello")
  const n0 = t0()
  _withVaporDirectives(n0, [[_directive_test], [_directive_hello, void 0, void 0, { world: true }]])
  return n0
}"
`;

exports[`compile > custom directive > component 1`] = `
"import { resolveComponent as _resolveComponent, resolveDirective as _resolveDirective, setInsertionState as _setInsertionState, createComponentWithFallback as _createComponentWithFallback, withVaporDirectives as _withVaporDirectives, createIf as _createIf, template as _template } from 'vue';
const t0 = _template("<div></div>")

export function render(_ctx) {
  const _component_Bar = _resolveComponent("Bar")
  const _component_Comp = _resolveComponent("Comp")
  const _directive_hello = _resolveDirective("hello")
  const _directive_test = _resolveDirective("test")
  const n4 = _createComponentWithFallback(_component_Comp, null, {
    "default": () => {
      const n0 = _createIf(() => (true), () => {
        const n3 = t0()
        _setInsertionState(n3)
        const n2 = _createComponentWithFallback(_component_Bar)
        _withVaporDirectives(n2, [[_directive_hello, void 0, void 0, { world: true }]])
        return n3
      })
      return n0
    }
  }, true)
  _withVaporDirectives(n4, [[_directive_test]])
  return n4
}"
`;

exports[`compile > directives > custom directive > basic 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample]])
  return n0
}"
`;

exports[`compile > directives > custom directive > binding value 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample, () => _ctx.msg]])
  return n0
}"
`;

exports[`compile > directives > custom directive > dynamic parameters 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample, () => _ctx.msg, _ctx.foo]])
  return n0
}"
`;

exports[`compile > directives > custom directive > modifiers 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample, () => _ctx.msg, void 0, { bar: true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > modifiers w/o binding 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample, void 0, void 0, { "foo-bar": true }]])
  return n0
}"
`;

exports[`compile > directives > custom directive > static parameters 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample, () => _ctx.msg, "foo"]])
  return n0
}"
`;

exports[`compile > directives > custom directive > static parameters and modifiers 1`] = `
"import { withVaporDirectives as _withVaporDirectives, template as _template } from 'vue';
const t0 = _template("<div></div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  _withVaporDirectives(n0, [[_ctx.vExample, () => _ctx.msg, "foo", { bar: true }]])
  return n0
}"
`;

exports[`compile > directives > v-cloak > basic 1`] = `
"import { template as _template } from 'vue';
const t0 = _template("<div>test</div>", true)

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;

exports[`compile > directives > v-pre > basic 1`] = `
"import { template as _template } from 'vue';
const t0 = _template("<div :id=\\"foo\\"><Comp></Comp>{{ bar }}</div>", true)

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const n0 = t0()
  return n0
}"
`;

exports[`compile > directives > v-pre > should not affect siblings after it 1`] = `
"import { resolveComponent as _resolveComponent, setInsertionState as _setInsertionState, createComponentWithFallback as _createComponentWithFallback, child as _child, setProp as _setProp, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div :id=\\"foo\\"><Comp></Comp>{{ bar }}</div>")
const t1 = _template("<div> </div>")

export function render(_ctx, $props, $emit, $attrs, $slots) {
  const _component_Comp = _resolveComponent("Comp")
  const n0 = t0()
  const n3 = t1()
  const n2 = _child(n3)
  _setInsertionState(n3, 0)
  const n1 = _createComponentWithFallback(_component_Comp)
  _renderEffect(() => {
    _setProp(n3, "id", _ctx.foo)
    _setText(n2, _toDisplayString(_ctx.bar))
  })
  return [n0, n3]
}"
`;

exports[`compile > dynamic root 1`] = `
"import { toDisplayString as _toDisplayString, setText as _setText, template as _template } from 'vue';
const t0 = _template(" ")

export function render(_ctx) {
  const n0 = t0()
  _setText(n0, _toDisplayString(1) + _toDisplayString(2))
  return n0
}"
`;

exports[`compile > dynamic root nodes and interpolation 1`] = `
"import { child as _child, setProp as _setProp, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, delegateEvents as _delegateEvents, template as _template } from 'vue';
const t0 = _template("<button> </button>", true)
_delegateEvents("click")

export function render(_ctx) {
  const n0 = t0()
  const x0 = _child(n0)
  n0.$evtclick = e => _ctx.handleClick(e)
  _renderEffect(() => {
    const _count = _ctx.count
    _setProp(n0, "id", _count)
    _setText(x0, _toDisplayString(_count) + "foo" + _toDisplayString(_count) + "foo" + _toDisplayString(_count))
  })
  return n0
}"
`;

exports[`compile > execution order > basic 1`] = `
"import { child as _child, setProp as _setProp, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div> </div>", true)

export function render(_ctx) {
  const n0 = t0()
  const x0 = _child(n0)
  _renderEffect(() => {
    _setProp(n0, "id", _ctx.foo)
    _setText(x0, _toDisplayString(_ctx.bar))
  })
  return n0
}"
`;

exports[`compile > execution order > with v-once 1`] = `
"import { child as _child, next as _next, nthChild as _nthChild, toDisplayString as _toDisplayString, setText as _setText, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div><span> </span> <br> </div>", true)

export function render(_ctx) {
  const n3 = t0()
  const n0 = _child(n3)
  const n1 = _next(n0)
  const n2 = _nthChild(n3, 3)
  const x0 = _child(n0)
  _setText(x0, _toDisplayString(_ctx.foo))
  _renderEffect(() => {
    _setText(n1, " " + _toDisplayString(_ctx.bar))
    _setText(n2, " " + _toDisplayString(_ctx.baz))
  })
  return n3
}"
`;

exports[`compile > expression parsing > interpolation 1`] = `
"
  const n0 = t0()
  _renderEffect(() => _setText(n0, _toDisplayString(a + b.value)))
  return n0
"
`;

exports[`compile > expression parsing > v-bind 1`] = `
"
  const n0 = t0()
  _renderEffect(() => {
    const _key = key.value
    _setDynamicProps(n0, [{ [_key+1]: _unref(foo)[_key+1]() }], true)
  })
  return n0
"
`;

exports[`compile > fragment 1`] = `
"import { template as _template } from 'vue';
const t0 = _template("<p></p>")
const t1 = _template("<span></span>")
const t2 = _template("<div></div>")

export function render(_ctx) {
  const n0 = t0()
  const n1 = t1()
  const n2 = t2()
  return [n0, n1, n2]
}"
`;

exports[`compile > setInsertionState > next, child and nthChild should be above the setInsertionState 1`] = `
"import { resolveComponent as _resolveComponent, child as _child, next as _next, setInsertionState as _setInsertionState, createComponentWithFallback as _createComponentWithFallback, nthChild as _nthChild, createIf as _createIf, setProp as _setProp, renderEffect as _renderEffect, template as _template } from 'vue';
const t0 = _template("<div></div>")
const t1 = _template("<div><div></div><!><div></div><!><div><button></button></div></div>", true)

export function render(_ctx) {
  const _component_Comp = _resolveComponent("Comp")
  const n6 = t1()
  const n5 = _next(_child(n6))
  const n7 = _nthChild(n6, 3)
  const p0 = _next(n7)
  const n4 = _child(p0)
  _setInsertionState(n6, n5)
  const n0 = _createComponentWithFallback(_component_Comp)
  _setInsertionState(n6, n7)
  const n1 = _createIf(() => (true), () => {
    const n3 = t0()
    return n3
  })
  _renderEffect(() => _setProp(n4, "disabled", _ctx.foo))
  return n6
}"
`;

exports[`compile > static + dynamic root 1`] = `
"import { toDisplayString as _toDisplayString, setText as _setText, template as _template } from 'vue';
const t0 = _template(" ")

export function render(_ctx) {
  const n0 = t0()
  _setText(n0, _toDisplayString(1) + _toDisplayString(2) + "3" + _toDisplayString(4) + _toDisplayString(5) + "6" + _toDisplayString(7) + _toDisplayString(8) + "9" + 'A' + 'B')
  return n0
}"
`;

exports[`compile > static template 1`] = `
"import { template as _template } from 'vue';
const t0 = _template("<div><p>hello</p><input><span></span></div>", true)

export function render(_ctx) {
  const n0 = t0()
  return n0
}"
`;
