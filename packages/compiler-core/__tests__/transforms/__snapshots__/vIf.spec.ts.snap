// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: v-if > codegen > basic v-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createElementBlock("div", { key: 0 }))
      : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-if > codegen > increasing key: v-if + v-else-if + v-else 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return (_openBlock(), _createElementBlock(_Fragment, null, [
      ok
        ? (_openBlock(), _createElementBlock("div", { key: 0 }))
        : (_openBlock(), _createElementBlock("p", { key: 1 })),
      another
        ? (_openBlock(), _createElementBlock("div", { key: 2 }))
        : orNot
          ? (_openBlock(), _createElementBlock("p", { key: 3 }))
          : (_openBlock(), _createElementBlock("p", { key: 4 }))
    ], 64 /* STABLE_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-if > codegen > multiple v-if that are sibling nodes should have different keys 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return (_openBlock(), _createElementBlock(_Fragment, null, [
      ok
        ? (_openBlock(), _createElementBlock("div", { key: 0 }))
        : _createCommentVNode("v-if", true),
      orNot
        ? (_openBlock(), _createElementBlock("p", { key: 1 }))
        : _createCommentVNode("v-if", true)
    ], 64 /* STABLE_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-if > codegen > template v-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createElementVNode: _createElementVNode, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
          _createElementVNode("div"),
          "hello",
          _createElementVNode("p")
        ], 64 /* STABLE_FRAGMENT */))
      : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-if > codegen > template v-if w/ single <slot/> child 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { renderSlot: _renderSlot, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? _renderSlot($slots, "default", { key: 0 })
      : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-if > codegen > user-defined keys > avoid duplicate keys 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { mergeProps: _mergeProps, openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createElementBlock("div", _mergeProps({ key: "custom_key" }, obj), null, 16 /* FULL_PROPS */))
      : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-if > codegen > user-defined keys > correct key matching 1`] = `
"const _Vue = Vue
const { createCommentVNode: _createCommentVNode } = _Vue

const _hoisted_1 = Symbol()

return function render(_ctx, _cache) {
  with (_ctx) {
    const { normalizeProps: _normalizeProps, guardReactiveProps: _guardReactiveProps, openBlock: _openBlock, createElementBlock: _createElementBlock, mergeProps: _mergeProps, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return (_openBlock(), _createElementBlock(_Fragment, null, [
      ok
        ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: 0 }, separate)), null, 16 /* FULL_PROPS */))
        : _createCommentVNode("v-if", true),
      (_openBlock(), _createElementBlock("div", _mergeProps({ key: 123 }, other1), null, 16 /* FULL_PROPS */)),
      ok1
        ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_1 }, obj1)), null, 16 /* FULL_PROPS */))
        : (_openBlock(), _createElementBlock("div", _mergeProps({ key: 0 }, obj2), null, 16 /* FULL_PROPS */))
    ], 64 /* STABLE_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-if > codegen > user-defined keys > key on v-else 1`] = `
"const _Vue = Vue
const { createCommentVNode: _createCommentVNode } = _Vue

const _hoisted_1 = Symbol()
const _hoisted_2 = Symbol()

return function render(_ctx, _cache) {
  with (_ctx) {
    const { normalizeProps: _normalizeProps, guardReactiveProps: _guardReactiveProps, openBlock: _openBlock, createElementBlock: _createElementBlock, mergeProps: _mergeProps, createCommentVNode: _createCommentVNode } = _Vue

    return ok1
      ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_1 }, obj1)), null, 16 /* FULL_PROPS */))
      : ok2
        ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_2 }, obj2)), null, 16 /* FULL_PROPS */))
        : (_openBlock(), _createElementBlock("div", _mergeProps({ key: 0 }, obj3), null, 16 /* FULL_PROPS */))
  }
}"
`;

exports[`compiler: v-if > codegen > user-defined keys > key on v-else with misc irrelevant nodes between 1`] = `
"const _Vue = Vue
const { createElementVNode: _createElementVNode, createCommentVNode: _createCommentVNode } = _Vue

const _hoisted_1 = Symbol()
const _hoisted_2 = Symbol()

return function render(_ctx, _cache) {
  with (_ctx) {
    const { normalizeProps: _normalizeProps, guardReactiveProps: _guardReactiveProps, openBlock: _openBlock, createElementBlock: _createElementBlock, mergeProps: _mergeProps, createCommentVNode: _createCommentVNode, createElementVNode: _createElementVNode, Fragment: _Fragment } = _Vue

    return ok1
      ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_1 }, obj1)), null, 16 /* FULL_PROPS */))
      : ok2
        ? (_openBlock(), _createElementBlock(_Fragment, { key: _hoisted_2 }, [
            _createCommentVNode("comment1"),
            _createElementVNode("div", _normalizeProps(_guardReactiveProps(obj2)), null, 16 /* FULL_PROPS */)
          ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
        : (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
            _createCommentVNode("comment2"),
            (_openBlock(), _createElementBlock("div", _mergeProps({ key: 0 }, obj3), null, 16 /* FULL_PROPS */))
          ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-if > codegen > user-defined keys > key on v-else-if 1`] = `
"const _Vue = Vue
const { createCommentVNode: _createCommentVNode } = _Vue

const _hoisted_1 = Symbol()
const _hoisted_2 = Symbol()

return function render(_ctx, _cache) {
  with (_ctx) {
    const { normalizeProps: _normalizeProps, guardReactiveProps: _guardReactiveProps, openBlock: _openBlock, createElementBlock: _createElementBlock, mergeProps: _mergeProps, createCommentVNode: _createCommentVNode } = _Vue

    return ok1
      ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_1 }, obj1)), null, 16 /* FULL_PROPS */))
      : ok2
        ? (_openBlock(), _createElementBlock("div", _mergeProps({ key: 0 }, obj2), null, 16 /* FULL_PROPS */))
        : (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_2 }, obj3)), null, 16 /* FULL_PROPS */))
  }
}"
`;

exports[`compiler: v-if > codegen > user-defined keys > key on v-if 1`] = `
"const _Vue = Vue
const { createCommentVNode: _createCommentVNode } = _Vue

const _hoisted_1 = Symbol()
const _hoisted_2 = Symbol()

return function render(_ctx, _cache) {
  with (_ctx) {
    const { mergeProps: _mergeProps, openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, normalizeProps: _normalizeProps, guardReactiveProps: _guardReactiveProps } = _Vue

    return ok1
      ? (_openBlock(), _createElementBlock("div", _mergeProps({ key: 1 }, obj1), null, 16 /* FULL_PROPS */))
      : ok2
        ? (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_1 }, obj2)), null, 16 /* FULL_PROPS */))
        : (_openBlock(), _createElementBlock("div", _normalizeProps(_mergeProps({ key: _hoisted_2 }, obj3)), null, 16 /* FULL_PROPS */))
  }
}"
`;

exports[`compiler: v-if > codegen > v-if + v-else 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createElementBlock("div", { key: 0 }))
      : (_openBlock(), _createElementBlock("p", { key: 1 }))
  }
}"
`;

exports[`compiler: v-if > codegen > v-if + v-else-if + v-else 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return ok
      ? (_openBlock(), _createElementBlock("div", { key: 0 }))
      : orNot
        ? (_openBlock(), _createElementBlock("p", { key: 1 }))
        : (_openBlock(), _createElementBlock(_Fragment, { key: 2 }, ["fine"], 64 /* STABLE_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-if > codegen > v-if + v-else-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? (_openBlock(), _createElementBlock("div", { key: 0 }))
      : orNot
        ? (_openBlock(), _createElementBlock("p", { key: 1 }))
        : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-if > codegen > v-if on <slot/> 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { renderSlot: _renderSlot, createCommentVNode: _createCommentVNode } = _Vue

    return ok
      ? _renderSlot($slots, "default", { key: 0 })
      : _createCommentVNode("v-if", true)
  }
}"
`;
