// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compiler: v-skip > transform > basic 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createCommentVNode: _createCommentVNode, openBlock: _openBlock, createElementBlock: _createElementBlock } = _Vue

    return (_ctx.ok)
      ? _createCommentVNode("v-skip", true)
      : (_openBlock(), _createElementBlock("div", { key: 1 }))
  }
}"
`;

exports[`compiler: v-skip > transform > nested v-skip 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createCommentVNode: _createCommentVNode, openBlock: _openBlock, createElementBlock: _createElementBlock, Fragment: _Fragment } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
          (_ctx.nested)
            ? _createCommentVNode("v-skip", true)
            : (_openBlock(), _createElementBlock("span", { key: 1 }))
        ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : (_openBlock(), _createElementBlock("div", { key: 1 }, [
          (_ctx.nested)
            ? _createCommentVNode("v-skip", true)
            : (_openBlock(), _createElementBlock("span", { key: 1 }))
        ]))
  }
}"
`;

exports[`compiler: v-skip > transform > on Teleport 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, createCommentVNode: _createCommentVNode, Teleport: _Teleport, openBlock: _openBlock, createBlock: _createBlock } = _Vue

    return (_ctx.ok)
      ? _createCommentVNode("v-skip", true)
      : (_openBlock(), _createBlock(_Teleport, {
          key: 1,
          to: "target"
        }))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with default slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, resolveComponent: _resolveComponent, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, ["foo"], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : (_openBlock(), _createBlock(_component_Comp, { key: 1 }, {
          default: _withCtx(() => ["foo"]),
          _: 1 /* STABLE */
        }))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with dynamic slot + default slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, resolveComponent: _resolveComponent, resolveSkipComponent: _resolveSkipComponent, openBlock: _openBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_openBlock(), _createBlock(_resolveSkipComponent(_ctx.ok, _component_Comp), null, {
      [_ctx.foo]: _withCtx(() => ["foo"]),
      default: _withCtx(() => ["default"]),
      _: 2 /* DYNAMIC */
    }, 1024 /* DYNAMIC_SLOTS */))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with dynamic slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, toDisplayString: _toDisplayString, resolveComponent: _resolveComponent, resolveSkipComponent: _resolveSkipComponent, openBlock: _openBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_openBlock(), _createBlock(_resolveSkipComponent(_ctx.ok, _component_Comp), null, {
      [_ctx.foo]: _withCtx(() => [_toDisplayString(_ctx.foo)]),
      _: 2 /* DYNAMIC */
    }, 1024 /* DYNAMIC_SLOTS */))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with implicit default slot + v-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, toDisplayString: _toDisplayString, openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, resolveComponent: _resolveComponent, Fragment: _Fragment, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
          (_ctx.yes)
            ? (_openBlock(), _createElementBlock("span", { key: 0 }, _toDisplayString(_ctx.default), 1 /* TEXT */))
            : _createCommentVNode("v-if", true)
        ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : (_openBlock(), _createBlock(_component_Comp, { key: 1 }, {
          default: _withCtx(() => [
            (_ctx.yes)
              ? (_openBlock(), _createElementBlock("span", { key: 0 }, _toDisplayString(_ctx.default), 1 /* TEXT */))
              : _createCommentVNode("v-if", true)
          ]),
          _: 1 /* STABLE */
        }))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with multiple implicit default slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, createElementVNode: _createElementVNode, toDisplayString: _toDisplayString, resolveComponent: _resolveComponent, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
          _createElementVNode("span"),
          _createElementVNode("div")
        ], 64 /* STABLE_FRAGMENT */))
      : (_openBlock(), _createBlock(_component_Comp, { key: 1 }, {
          foo: _withCtx(() => [_toDisplayString(_ctx.foo)]),
          default: _withCtx(() => [
            _createElementVNode("span"),
            _createElementVNode("div")
          ]),
          _: 1 /* STABLE */
        }))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with multiple named slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, resolveComponent: _resolveComponent, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, ["default"], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : (_openBlock(), _createBlock(_component_Comp, { key: 1 }, {
          default: _withCtx(() => ["default"]),
          foo: _withCtx(() => ["foo"]),
          _: 1 /* STABLE */
        }))
  }
}"
`;

exports[`compiler: v-skip > transform > on component with name default slot + v-if 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, createSlots: _createSlots, toDisplayString: _toDisplayString, resolveComponent: _resolveComponent, resolveSkipComponent: _resolveSkipComponent, openBlock: _openBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_openBlock(), _createBlock(_resolveSkipComponent(_ctx.ok, _component_Comp), null, _createSlots({ _: 2 /* DYNAMIC */ }, [
      (_ctx.yes)
        ? {
            name: "default",
            fn: _withCtx(() => [_toDisplayString(_ctx.default)]),
            key: "0"
          }
        : undefined
    ]), 1024 /* DYNAMIC_SLOTS */))
  }
}"
`;

exports[`compiler: v-skip > transform > on component without slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, createCommentVNode: _createCommentVNode, resolveComponent: _resolveComponent, openBlock: _openBlock, createBlock: _createBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? _createCommentVNode("v-skip", true)
      : (_openBlock(), _createBlock(_component_Comp, { key: 1 }))
  }
}"
`;

exports[`compiler: v-skip > transform > on dynamic component with default slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, resolveDynamicComponent: _resolveDynamicComponent, openBlock: _openBlock, createBlock: _createBlock, Fragment: _Fragment, createElementBlock: _createElementBlock } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, ["foo"], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.Comp), { key: 1 }, {
          default: _withCtx(() => ["foo"]),
          _: 1 /* STABLE */
        }))
  }
}"
`;

exports[`compiler: v-skip > transform > on dynamic component with dynamic slot 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { withCtx: _withCtx, resolveDynamicComponent: _resolveDynamicComponent, openBlock: _openBlock, createBlock: _createBlock, resolveSkipComponent: _resolveSkipComponent } = _Vue

    return (_openBlock(), _createBlock(_resolveSkipComponent(_ctx.ok, _resolveDynamicComponent(_ctx.Comp)), null, {
      [_ctx.foo]: _withCtx(() => ["foo"]),
      _: 2 /* DYNAMIC */
    }, 1024 /* DYNAMIC_SLOTS */))
  }
}"
`;

exports[`compiler: v-skip > transform > v-else + v-skip 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock("div", { key: 0 }))
      : (_openBlock(), _createElementBlock(_Fragment, { key: 1 }, [
          (_ctx.nested)
            ? _createCommentVNode("v-skip", true)
            : (_openBlock(), _createElementBlock("div", { key: 1 }))
        ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
  }
}"
`;

exports[`compiler: v-skip > transform > v-else-if + v-skip 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, createCommentVNode: _createCommentVNode, Fragment: _Fragment } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock("div", { key: 0 }))
      : (_ctx.yes)
        ? (_openBlock(), _createElementBlock(_Fragment, { key: 1 }, [
            (_ctx.nested)
              ? _createCommentVNode("v-skip", true)
              : (_openBlock(), _createElementBlock("div", { key: 1 }))
          ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
        : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-skip > transform > v-if + v-skip 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createCommentVNode: _createCommentVNode, openBlock: _openBlock, createElementBlock: _createElementBlock, Fragment: _Fragment } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
          (_ctx.nested)
            ? _createCommentVNode("v-skip", true)
            : (_openBlock(), _createElementBlock("div", { key: 1 }))
        ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : _createCommentVNode("v-if", true)
  }
}"
`;

exports[`compiler: v-skip > transform > v-skip with key 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createCommentVNode: _createCommentVNode, openBlock: _openBlock, createElementBlock: _createElementBlock } = _Vue

    return (_ctx.nested)
      ? _createCommentVNode("v-skip", true)
      : (_openBlock(), _createElementBlock("div", { key: "foo" }))
  }
}"
`;

exports[`compiler: v-skip > transform > with component children 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { resolveComponent: _resolveComponent, openBlock: _openBlock, createBlock: _createBlock, createElementBlock: _createElementBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? (_openBlock(), _createBlock(_component_Comp, { key: 0 }))
      : (_openBlock(), _createElementBlock("div", { key: 1 }, [
          (_openBlock(), _createBlock(_component_Comp, { key: 0 }))
        ]))
  }
}"
`;

exports[`compiler: v-skip > transform > with element children 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock("span", { key: 0 }))
      : (_openBlock(), _createElementBlock("div", { key: 1 }, [
          (_openBlock(), _createElementBlock("span", { key: 0 }))
        ]))
  }
}"
`;

exports[`compiler: v-skip > transform > with multiple children 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { createElementVNode: _createElementVNode, resolveComponent: _resolveComponent, createVNode: _createVNode, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock } = _Vue

    const _component_Comp = _resolveComponent("Comp")

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [
          _createElementVNode("span"),
          _createVNode(_component_Comp)
        ], 64 /* STABLE_FRAGMENT */))
      : (_openBlock(), _createElementBlock("div", { key: 1 }, [
          _createElementVNode("span"),
          _createVNode(_component_Comp)
        ]))
  }
}"
`;

exports[`compiler: v-skip > transform > with text children 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { toDisplayString: _toDisplayString, Fragment: _Fragment, openBlock: _openBlock, createElementBlock: _createElementBlock } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [_toDisplayString(_ctx.foo)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))
      : (_openBlock(), _createElementBlock("div", { key: 1 }, _toDisplayString(_ctx.foo), 1 /* TEXT */))
  }
}"
`;

exports[`compiler: v-skip > transform > with v-memo 1`] = `
"const _Vue = Vue

return function render(_ctx, _cache) {
  with (_ctx) {
    const { openBlock: _openBlock, createElementBlock: _createElementBlock, withMemo: _withMemo } = _Vue

    return (_ctx.ok)
      ? (_openBlock(), _createElementBlock("span", { key: 0 }))
      : _withMemo([1], () => (_openBlock(), _createElementBlock("div", { key: 1 }, [
          (_openBlock(), _createElementBlock("span", { key: 0 }))
        ])), _cache, 0)
  }
}"
`;
